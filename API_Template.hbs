import { makeApi, Zodios, type ZodiosOptions } from "@zodios/core";
import { z } from "zod";
import { Platform } from "react-native";

{{!-- Debugging --}}
{{log options}}
{{log endpoints}}

{{#each schemas}}
const {{@key}} = {{{this}}};
export type {{@key}} = z.infer<typeof {{@key}}>;
{{/each}}

const schemas = {
{{#each schemas}}
	{{@key}},
{{/each}}
};

const endpoints = makeApi([
  {{#each endpoints}}
  {
    method: "{{method}}",
    path: "{{path}}",
    alias: "{{alias}}",
    description: `{{description}}`,
    requestFormat: "json",
    parameters: [
      {{#each parameters as |param|}}
      {
        name: "{{param.name}}",
        description: `{{param.description}}`,
        type: "{{param.type}}",
        schema: {{param.schema}},
      },
      {{/each}}
    ],
    response: {{response}},
    errors: [
      {
        status: 500,
        description: `Internal Server Error`,
        schema: z.void(),
      },
    ],
  },
  {{/each}}
]);


function CreateBaseURL() {
  if (Platform.OS === "web" && !window.location.origin.includes("localhost")) {
    return window.location.origin;
  } else {
    return {{#if options.baseUrl}}"{{options.baseUrl}}" {{/if}};
  }
}
export let AuthToken = "Token Not Added";

export function setAuthToken(token: string) {
  AuthToken = token;
}

export const {{options.apiClientName}} = new Zodios(CreateBaseURL(), endpoints);

// Add an Axios interceptor to dynamically set the Authorization header
{{options.apiClientName}}.axios.interceptors.request.use((config) => {
  if (AuthToken && AuthToken !== "Token Not Added") {
    config.headers.Authorization = `Bearer ${AuthToken}`;
  }
  return config;
});

export function createApiClient(baseUrl: string, options?: ZodiosOptions) {
    return new Zodios(baseUrl, endpoints, options);
}